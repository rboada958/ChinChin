apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    buildFeatures{
        dataBinding = true
        // for view binding :
        // viewBinding = true
    }

    defaultConfig {
        applicationId "com.chinchinapp.chinchin"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }


    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "ChinChin-${variant.name}-${variant.versionName}.apk"
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        staging {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            initWith staging
            debuggable false
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$androidxVersion"
    implementation "androidx.core:core-ktx:1.3.0"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.cardview:cardview:$componentsVersion"
    implementation "androidx.recyclerview:recyclerview:$componentsVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.multidex:multidex:$multidexVersion"

    //Room
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    //Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"

    //Work Manager
    implementation "androidx.work:work-runtime:$workVersion"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$workVersion"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroidVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesAndroidVersion"

    //Dagger core
    kapt "com.google.dagger:dagger-compiler:$daggerCoreVersion"
    implementation "com.google.dagger:dagger:$daggerCoreVersion"

    // Including Dagger Android
    implementation "com.google.dagger:dagger-android:$daggerAndroidVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerAndroidVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerAndroidVersion"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
    implementation "com.squareup.moshi:moshi:1.9.2"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    //PersistentCookies
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'com.google.api-client:google-api-client:1.30.9'

    //Material Dialogs
    implementation "com.afollestad.material-dialogs:core:$materialDialogsVersion"

    //Circle Image View
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    //Anko
    implementation "org.jetbrains.anko:anko-commons:0.10.8"
    implementation "org.jetbrains.anko:anko-design:0.10.8"

    //QR Code
    implementation 'com.github.kenglxn.QRGen:android:2.6.0'

    //Epoxy
    implementation "com.airbnb.android:epoxy:$epoxyVersion"
    implementation "com.airbnb.android:epoxy-databinding:$epoxyVersion"
    kapt "com.airbnb.android:epoxy-processor:$epoxyVersion"
}